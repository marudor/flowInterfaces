import React from 'react';

type LocaleData = {
    locale: string,
    [key: string]: any,
}

type IntlConfig = {
    locale: string,
    formats: Object,
    messages: {[id: string]: string},
    defaultLocale: string,
    defaultFormats: Object,
};

type MessageDescriptor = {
    id: string,
    defaultMessage: string,
    description?: string,
};

type MessageDescriptorMap = {[key: string]: MessageDescriptor};

type IntlFormat = {
    formatDate: (value: any, options?: Object) => string,
    formatTime: (value: any, options?: Object) => string,
    formatRelative: (value: any, options?: Object) => string,
    formatNumber: (value: any, options?: Object) => string,
    formatPlural: (value: any, options?: Object) => string,
    formatMessage: (messageDescriptor: MessageDescriptor, values?: Object) => string,
    formatHTMLMessage: (messageDescriptor: MessageDescriptor, values?: Object) => string,
};

declare module 'react-intl' {
    declare interface ReactIntl extends React.Component<*, *, *> {
        addLocaleData(data: LocaleData | Array<LocaleData>): void;
        intlShape: IntlConfig & IntlFormat & {now: () => number};
        injectIntl(WrappedComponent: ReactClass<*, *, *>, options?: {
            intlPropName?: string,
            withRef?: boolean}
        ): ReactClass<*, *, *>;
        defineMessages(messageDescriptors: MessageDescriptorMap): MessageDescriptorMap;
        IntlProvider: React.Component<*, *, *>;
        FormattedDate: React.Component<*, *, *>;
        FormattedTime: React.Component<*, *, *>;
        FormattedRelative: React.Component<*, *, *>;
        FormattedNumber: React.Component<*, *, *>;
        FormattedPlural: React.Component<*, *, *>;
        FormattedMessage: React.Component<*, *, *>;
        FormattedHTMLMessage: React.Component<*, *, *>;
    }
    declare var exports: ReactIntl;
}
